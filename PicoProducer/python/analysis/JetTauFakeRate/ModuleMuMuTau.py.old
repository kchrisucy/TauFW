# Author: Konstantinos Christoforou (Jan 2021)
# Description: Simple module to pre-select mumutau events

import sys
import numpy as np

from ROOT import TFile, TTree, TH1D
#from TauFW.PicoProducer.analysis.ModuleTauTriad import *
from PhysicsTools.NanoAODTools.postprocessing.framework.eventloop import Module
#from TauFW.PicoProducer.analysis.utils import *
from TauFW.PicoProducer.corrections.MuonSFs import *
from TauPOG.TauIDSFs.TauIDSFTool import TauIDSFTool, TauESTool, campaigns
from PhysicsTools.NanoAODTools.postprocessing.framework.datamodel import Collection

from TauFW.PicoProducer.corrections.BTagTool import BTagWeightTool, BTagWPs
# from TauFW.PicoProducer.analysis.utils import ensurebranches, redirectbranch, deltaPhi, getmet, getmetfilters, correctmet, getlepvetoes
from TauFW.PicoProducer.analysis.utils import deltaPhi, getmetfilters
from TauFW.PicoProducer.corrections.PileupTool import *
from TauFW.PicoProducer.corrections.MuonSFs import *
from TauPOG.TauIDSFs.TauIDSFTool import TauIDSFTool, TauESTool, campaigns

class ModuleMuMuTau(Module):
  
  def __init__(self,fname,**kwargs):
    self.outfile = TFile(fname,'RECREATE')
    self.channel    = kwargs.get('channel',  'none'         ) # channel name
    self.dtype      = kwargs.get('dtype',    'data'         )
    self.ismc       = self.dtype=='mc'
    self.isdata     = self.dtype=='data' or self.dtype=='embed'
    self.isembed    = self.dtype=='embed'
    self.era        = kwargs.get('era',     2017           ) # integer, e.g. 2017, 2018, 2018UL
    #self.dojec      = kwargs.get('jec',      True           ) and self.ismc #and self.year==2016 #False
    #self.useT1      = kwargs.get('useT1',    False          ) # MET T1
    self.verbosity  = kwargs.get('verb',     0              ) # verbosity
    
    tauSFVersion  = { 2016: '2016Legacy', 2017: '2017ReReco', 2018: '2018ReReco' }
    if "2016" in self.era : 
      self.yearForTauSF = 2016
    elif "2017" in self.era : 
      self.yearForTauSF = 2017
    elif "2018" in self.era :
      self.yearForTauSF = 2018
    else :
      "Sanity check error, no 2016/2017/2018 in self.era"
    
    ## CORRECTIONS
    self.metfilt      = getmetfilters(self.era,self.isdata,verb=self.verbosity)
    if self.ismc:
      self.puTool     = PileupWeightTool(era=self.era,sample=fname,verb=self.verbosity)
      self.muSFs      = MuonSFs(era=self.era,verb=self.verbosity) # muon id/iso/trigger SFs
      self.tesTool    = TauESTool(tauSFVersion[self.yearForTauSF])  # real tau energy scale corrections
      self.tauSFsT_dm = TauIDSFTool(tauSFVersion[self.yearForTauSF],'DeepTau2017v2p1VSjet','Tight', dm=True)
      self.tauSFsT    = TauIDSFTool(tauSFVersion[self.yearForTauSF],'DeepTau2017v2p1VSjet','Tight')
      self.tauSFsM    = TauIDSFTool(tauSFVersion[self.yearForTauSF],'DeepTau2017v2p1VSjet','Medium')
      self.tauSFsVVVL = TauIDSFTool(tauSFVersion[self.yearForTauSF],'DeepTau2017v2p1VSjet','VVVLoose')      
      self.etfSFs     = TauIDSFTool(tauSFVersion[self.yearForTauSF],'DeepTau2017v2p1VSe',  'Medium')
      self.mtfSFs     = TauIDSFTool(tauSFVersion[self.yearForTauSF],'DeepTau2017v2p1VSmu', 'Tight')
    ## after opening the root files for muonSF and tauSF, something is getting confused, so you should reopen
    ## your output file in order to store your trees/branches
    self.outfile.cd()

    
    #print "Hi you are in mumutau after muSF"

    self.jetCutPt   = 30
    self.bjetCutEta = 2.4 if self.era==2016 else 2.5
    self.deepjet_wp = BTagWPs('DeepJet',era=self.era)

  def beginJob(self):
    """Prepare output analysis tree and cutflow histogram."""
    
    # CUTFLOW HISTOGRAM
    self.cutflow  = TH1D('cutflow','cutflow',25,0,25)
    self.cut_none = 0
    self.cut_trig = 1
    self.cut_muon = 2
    self.cut_tau  = 3
    self.cut_pair = 4
    self.cutflow.GetXaxis().SetBinLabel(1+self.cut_none, "no cut"  )
    self.cutflow.GetXaxis().SetBinLabel(1+self.cut_trig, "trigger" )
    self.cutflow.GetXaxis().SetBinLabel(1+self.cut_muon, "muon"    )
    self.cutflow.GetXaxis().SetBinLabel(1+self.cut_tau,  "tau"     )
    self.cutflow.GetXaxis().SetBinLabel(1+self.cut_pair, "pair"    )


    # TREE
    self.tree   = TTree('tree','tree')
    self.evt           = np.zeros(1,dtype='i')
    self.lumi          = np.zeros(1,dtype='i')
    self.metfilter     = np.zeros(1,dtype='?')
    self.genweight     = np.zeros(1,dtype='f')
    self.puweight      = np.zeros(1,dtype='f')
    self.trigweight    = np.zeros(1,dtype='f')
    self.idisoweight_1 = np.zeros(1,dtype='f')
    self.idisoweight_2 = np.zeros(1,dtype='f')
    self.idweightTdm_tau  = np.zeros(1,dtype='f')
    self.idweightT_tau    = np.zeros(1,dtype='f')
    self.idweightM_tau    = np.zeros(1,dtype='f')
    self.idweightVVVL_tau = np.zeros(1,dtype='f')
    self.ltfweight_tau    = np.zeros(1,dtype='f')
    self.ltfweight_tau    = np.zeros(1,dtype='f')
    self.pt_mu0   = np.zeros(1,dtype='f')
    self.eta_mu0  = np.zeros(1,dtype='f')
    self.q_mu0    = np.zeros(1,dtype='i')
    self.id_mu0   = np.zeros(1,dtype='?')
    self.iso_mu0  = np.zeros(1,dtype='f')
    self.pt_mu1   = np.zeros(1,dtype='f')
    self.eta_mu1  = np.zeros(1,dtype='f')
    self.q_mu1    = np.zeros(1,dtype='i')
    self.id_mu1   = np.zeros(1,dtype='?')
    self.iso_mu1  = np.zeros(1,dtype='f')
    self.pt_tau   = np.zeros(1,dtype='f')
    self.eta_tau  = np.zeros(1,dtype='f')
    self.q_tau    = np.zeros(1,dtype='i')
    self.id_tau   = np.zeros(1,dtype='?')
    self.iso_tau  = np.zeros(1,dtype='f')

    self.tree.Branch('evt',          self.evt,           'evt/I'          )          
    self.tree.Branch('lumi',         self.lumi,          'lumi/F'         )
    self.tree.Branch('metfilter',    self.metfilter,     'metfilter/F'    )              
    self.tree.Branch('genweight',    self.genweight,     'genweight/F'    )          
    self.tree.Branch('puweight',     self.puweight,      'puweight/F'     )          
    self.tree.Branch('trigweight',   self.trigweight,    'trigweight/F'   )
    self.tree.Branch('idisoweight_1',self.idisoweight_1, 'idisoweight_1/F')
    self.tree.Branch('idisoweight_2',self.idisoweight_2, 'idisoweight_2/F')
    self.tree.Branch('idweightTdm_tau',  self.idweightTdm_tau,  'idweightTdm_tau/F'  )
    self.tree.Branch('idweightT_tau',    self.idweightT_tau,    'idweightT_tau/F'    )
    self.tree.Branch('idweightM_tau',    self.idweightM_tau,    'idweightM_tau/F'    )
    self.tree.Branch('idweightVVVL_tau', self.idweightVVVL_tau, 'idweightVVVL_tau/F' )
    self.tree.Branch('ltfweight_tau',    self.ltfweight_tau,    'ltfweight_tau/F'    ) 
    self.tree.Branch('ltfweight_tau',    self.ltfweight_tau,    'ltfweight_tau/F'    )
    self.tree.Branch('pt_mu0',   self.pt_mu0,  'pt_mu0/F' )
    self.tree.Branch('eta_mu0',  self.eta_mu0, 'eta_mu0/F')
    self.tree.Branch('q_mu0',    self.q_mu0,   'q_mu0/I'  )
    self.tree.Branch('id_mu0',   self.id_mu0,  'id_mu0/O' )
    self.tree.Branch('iso_mu0',  self.iso_mu0, 'iso_mu0/F')
    self.tree.Branch('pt_mu1',   self.pt_mu1,  'pt_mu1/F' )
    self.tree.Branch('eta_mu1',  self.eta_mu1, 'eta_mu1/F')
    self.tree.Branch('q_mu1',    self.q_mu1,   'q_mu1/I'  )
    self.tree.Branch('id_mu1',   self.id_mu1,  'id_mu1/I' )
    self.tree.Branch('iso_mu1',  self.iso_mu1, 'iso_mu1/F')
    self.tree.Branch('pt_tau',   self.pt_tau,  'pt_tau/F' )
    self.tree.Branch('eta_tau',  self.eta_tau, 'eta_tau/F')
    self.tree.Branch('q_tau',    self.q_tau,   'q_tau/I'  )
    self.tree.Branch('id_tau',   self.id_tau,  'id_tau/I' )
    self.tree.Branch('iso_tau',  self.iso_tau, 'iso_tau/F')

    ## Jet to tau FR
    self.Loose_tree          = TTree('Loose_tree'       ,'Loose_tree')
    self.LooseGenuine_tree   = TTree('LooseGenuine_tree','LooseGenuine_tree')
    self.LooseFake_tree      = TTree('LooseFake_tree'   ,'LooseFake_tree')
    self.Tight_tree          = TTree('Tight_tree'       ,'Tight_tree')
    self.TightGenuine_tree   = TTree('TightGenuine_tree','TightGenuine_tree')
    self.TightFake_tree      = TTree('TightFake_tree'   ,'TightFake_tree')
    self.LnotT_tree          = TTree('LnotT_tree'       ,'LnotT_tree')
    self.LnotTGenuine_tree   = TTree('LnotTGenuine_tree','LnotTGenuine_tree')
    self.LnotTFake_tree      = TTree('LnotTFake_tree'   ,'LnotTFake_tree')

    self.Loose_0b_tree          = TTree('Loose_0b_tree'       ,'Loose_0b_tree')
    self.LooseGenuine_0b_tree   = TTree('LooseGenuine_0b_tree','LooseGenuine_0b_tree')
    self.LooseFake_0b_tree      = TTree('LooseFake_0b_tree'   ,'LooseFake_0b_tree')
    self.Tight_0b_tree          = TTree('Tight_0b_tree'       ,'Tight_0b_tree')
    self.TightGenuine_0b_tree   = TTree('TightGenuine_0b_tree','TightGenuine_0b_tree')
    self.TightFake_0b_tree      = TTree('TightFake_0b_tree'   ,'TightFake_0b_tree')
    self.LnotT_0b_tree          = TTree('LnotT_0b_tree'       ,'LnotT_0b_tree')
    self.LnotTGenuine_0b_tree   = TTree('LnotTGenuine_0b_tree','LnotTGenuine_0b_tree')
    self.LnotTFake_0b_tree      = TTree('LnotTFake_0b_tree'   ,'LnotTFake_0b_tree')

    self.TauPt              = np.zeros(1,dtype='f')
    self.TauEta             = np.zeros(1,dtype='f')
    self.TauDM              = np.zeros(1,dtype='f')
    self.JetN               = np.zeros(1,dtype='i')
    self.BJetN              = np.zeros(1,dtype='i')
    self.HT                 = np.zeros(1,dtype='f')
    self.LeptonOnePt        = np.zeros(1,dtype='f')
    self.LeptonTwoPt        = np.zeros(1,dtype='f')
    self.DileptonPt         = np.zeros(1,dtype='i')
    self.DileptonMass       = np.zeros(1,dtype='f')
    self.DileptonDeltaEta   = np.zeros(1,dtype='f')
    self.DileptonDeltaPhi   = np.zeros(1,dtype='f')
    self.DileptonDeltaR     = np.zeros(1,dtype='f')

    ## Loose trees, >= 1b
    self.Loose_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.Loose_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.Loose_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.Loose_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.Loose_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.Loose_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.Loose_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.Loose_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.Loose_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.Loose_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.Loose_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.Loose_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.Loose_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.Loose_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.LooseGenuine_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LooseGenuine_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LooseGenuine_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LooseGenuine_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LooseGenuine_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LooseGenuine_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LooseGenuine_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LooseGenuine_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LooseGenuine_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LooseGenuine_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LooseGenuine_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LooseGenuine_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LooseGenuine_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LooseGenuine_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.LooseFake_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LooseFake_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LooseFake_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LooseFake_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LooseFake_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LooseFake_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LooseFake_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LooseFake_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LooseFake_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LooseFake_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LooseFake_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LooseFake_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LooseFake_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LooseFake_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    ## tight trees
    self.Tight_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.Tight_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.Tight_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.Tight_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.Tight_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.Tight_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.Tight_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.Tight_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.Tight_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.Tight_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.Tight_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.Tight_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.Tight_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.Tight_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.TightGenuine_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.TightGenuine_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.TightGenuine_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.TightGenuine_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.TightGenuine_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.TightGenuine_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.TightGenuine_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.TightGenuine_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.TightGenuine_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.TightGenuine_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.TightGenuine_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.TightGenuine_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.TightGenuine_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.TightGenuine_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.TightFake_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.TightFake_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.TightFake_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.TightFake_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.TightFake_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.TightFake_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.TightFake_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.TightFake_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.TightFake_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.TightFake_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.TightFake_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.TightFake_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.TightFake_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.TightFake_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )
                                            
    ## loose not tight
    self.LnotT_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LnotT_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LnotT_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LnotT_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LnotT_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LnotT_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LnotT_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LnotT_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LnotT_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LnotT_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LnotT_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LnotT_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LnotT_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LnotT_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.LnotTGenuine_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LnotTGenuine_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LnotTGenuine_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LnotTGenuine_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LnotTGenuine_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LnotTGenuine_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LnotTGenuine_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LnotTGenuine_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LnotTGenuine_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LnotTGenuine_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LnotTGenuine_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LnotTGenuine_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LnotTGenuine_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LnotTGenuine_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.LnotTFake_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LnotTFake_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LnotTFake_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LnotTFake_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LnotTFake_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LnotTFake_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LnotTFake_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LnotTFake_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LnotTFake_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LnotTFake_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LnotTFake_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LnotTFake_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LnotTFake_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LnotTFake_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    ## Loose trees, 0b
    self.Loose_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.Loose_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.Loose_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.Loose_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.Loose_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.Loose_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.Loose_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.Loose_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.Loose_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.Loose_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.Loose_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.Loose_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.Loose_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.Loose_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.LooseGenuine_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LooseGenuine_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LooseGenuine_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LooseGenuine_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LooseGenuine_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LooseGenuine_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LooseGenuine_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LooseGenuine_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LooseGenuine_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LooseGenuine_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LooseGenuine_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LooseGenuine_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LooseGenuine_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LooseGenuine_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.LooseFake_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LooseFake_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LooseFake_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LooseFake_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LooseFake_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LooseFake_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LooseFake_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LooseFake_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LooseFake_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LooseFake_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LooseFake_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LooseFake_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LooseFake_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LooseFake_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    ## tight trees
    self.Tight_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.Tight_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.Tight_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.Tight_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.Tight_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.Tight_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.Tight_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.Tight_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.Tight_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.Tight_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.Tight_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.Tight_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.Tight_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.Tight_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.TightGenuine_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.TightGenuine_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.TightGenuine_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.TightGenuine_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.TightGenuine_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.TightGenuine_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.TightGenuine_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.TightGenuine_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.TightGenuine_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.TightGenuine_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.TightGenuine_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.TightGenuine_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.TightGenuine_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.TightGenuine_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.TightFake_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.TightFake_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.TightFake_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.TightFake_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.TightFake_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.TightFake_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.TightFake_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.TightFake_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.TightFake_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.TightFake_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.TightFake_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.TightFake_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.TightFake_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.TightFake_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )
                                            
    ## loose not tight
    self.LnotT_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LnotT_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LnotT_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LnotT_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LnotT_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LnotT_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LnotT_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LnotT_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LnotT_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LnotT_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LnotT_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LnotT_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LnotT_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LnotT_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.LnotTGenuine_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LnotTGenuine_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LnotTGenuine_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LnotTGenuine_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LnotTGenuine_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LnotTGenuine_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LnotTGenuine_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LnotTGenuine_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LnotTGenuine_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LnotTGenuine_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LnotTGenuine_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LnotTGenuine_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LnotTGenuine_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LnotTGenuine_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )

    self.LnotTFake_0b_tree.Branch("evt"             ,  self.evt             , "evt/I"              )          
    self.LnotTFake_0b_tree.Branch("TauPt"           ,  self.TauPt           , "TauPt/F"            )           
    self.LnotTFake_0b_tree.Branch("TauEta"          ,  self.TauEta          , "TauEta/F"           ) 
    self.LnotTFake_0b_tree.Branch("TauDM"           ,  self.TauDM           , "TauDM/I"            ) 
    self.LnotTFake_0b_tree.Branch("JetN"            ,  self.JetN            , "JetN/I"             ) 
    self.LnotTFake_0b_tree.Branch("BJetN"           ,  self.BJetN           , "BJetN/I"            ) 
    self.LnotTFake_0b_tree.Branch("HT"              ,  self.HT              , "HT/F"               ) 
    self.LnotTFake_0b_tree.Branch("LeptonOnePt"     ,  self.LeptonOnePt     , "LeptonOnePt/F"      ) 
    self.LnotTFake_0b_tree.Branch("LeptonTwoPt"     ,  self.LeptonTwoPt     , "LeptonTwoPt/F"      ) 
    self.LnotTFake_0b_tree.Branch("DileptonPt"      ,  self.DileptonPt      , "DileptonPt/F"       ) 
    self.LnotTFake_0b_tree.Branch("DileptonMass"    ,  self.DileptonMass    , "DileptonMass/F"     ) 
    self.LnotTFake_0b_tree.Branch("DileptonDeltaEta",  self.DileptonDeltaEta, "DileptonDeltaEta/F" )
    self.LnotTFake_0b_tree.Branch("DileptonDeltaPhi",  self.DileptonDeltaPhi, "DileptonDeltaPhi/F" ) 
    self.LnotTFake_0b_tree.Branch("DileptonDeltaR"  ,  self.DileptonDeltaR  , "DileptonDeltaR/F"   )
                                            
  def endJob(self):                         
    """Wrap up after running on all events and files"""
    self.outfile.Write()
    self.outfile.Close()
  
  def analyze(self, event):
    """Process event, return True (pass, go to next module) or False (fail, go to next event)."""
    
    # EVENT
    #print "New event"
    #print event.event
    #eventNum = event.event & 0xffffffffffffffff
    #self.evt[0]             = eventNum
    #print type(event.event)
    #print event.event & 0xffffffffffffffff #, type(event.event & 0xffffffffffffffff)
    self.evt[0]             = event.event & 0xffffffffffffffff 
    # NO CUT
    self.cutflow.Fill(self.cut_none)
    
    # TRIGGER
    if self.era=="2016" or self.era=="UL2016":
      if not (event.HLT_IsoMu24 and event.HLT_IsoTkMu24) : return False
    elif self.era=="2017" or self.era=="UL2017":
      if not (event.HLT_IsoMu24 and event.HLT_IsoMu27) : return False
    elif self.era=="2018" or self.era=="UL2018":
      if not event.HLT_IsoMu24 : return False
    self.cutflow.Fill(self.cut_trig)
    
    # SELECT MUONS
    muons = [ ]
    for muon in Collection(event,'Muon'):
      if muon.pt<20: continue
      if abs(muon.eta)>2.4: continue
      if abs(muon.dz)>0.2: continue
      if abs(muon.dxy)>0.045: continue
      if not muon.tightId: continue
      if muon.pfRelIso04_all>0.50: continue
      muons.append(muon)
    if len(muons)!=2: return False
    self.cutflow.Fill(self.cut_muon)
    
    # SELECT TAU
    taus = [ ]
    for tau in Collection(event,'Tau'):
      if tau.pt<20: continue
      if abs(tau.eta)>2.4: continue
      if abs(tau.dz)>0.2: continue
      if tau.decayMode not in [0,1,10,11]: continue
      if abs(tau.charge)!=1: continue
      if tau.idDeepTau2017v2p1VSe<16: continue # medium Vse
      if tau.idDeepTau2017v2p1VSmu<8: continue # tight Vsmu 
      if tau.idDeepTau2017v2p1VSjet<1: continue # start with VVVL versusJets
      taus.append(tau)
    if len(taus)!=1: return False
    self.cutflow.Fill(self.cut_tau)

    # Leptons
    muon0 = muons[0]
    muon1 = muons[1]
    tau   = max(taus,key=lambda p: p.pt)

    # Leptons dR
    #muon = max(muons,key=lambda p: p.pt)
    if muon0.DeltaR(muon1)<0.4: return False
    if muon0.DeltaR(tau)<0.4: return False
    if muon1.DeltaR(tau)<0.4: return False
    self.cutflow.Fill(self.cut_pair)
    
    #KC checks
    #for i, muon1 in enumerate(muons,1):
    #  print "The %s muon has pT = %s" %(i, muon1.pt)
    #  
    #print "OK, let's see this"
    #print "muon = max(muons,key=lambda p: p.pt), pT = %s" %(muon.pt)
    #print "muon0 = muons[0], pT = %s" %(muon0.pt)
    #print "muon1 = muons[1], pT = %s" %(muon1.pt)

    # VETO for extraMuons
    extramuon_veto = False
    looseMuons = [ ]    
    for muon in Collection(event,'Muon'):
      if muon.pt<10: continue
      if abs(muon.eta)>2.4: continue
      if abs(muon.dz)>0.2: continue
      if abs(muon.dxy)>0.045: continue
      if muon.pfRelIso04_all>0.3: continue
      if any(muon.DeltaR(tau)<0.4 for tau in taus): continue
      if muon.looseId and all(m._index!=muon._index for m in muons):
        looseMuons.append(muon)
        extramuon_veto = True
        
    if extramuon_veto : return False
    
    # VETO ELECTRONS
    elec_veto = False

    looseElectrons = [ ]
    for electron in Collection(event,'Electron'):
      if electron.pt<10: continue
      if abs(electron.eta)>2.5: continue
      if abs(electron.dz)>0.2: continue
      if abs(electron.dxy)>0.045: continue
      if electron.pfRelIso03_all>0.3: continue
      if any(electron.DeltaR(tau)<0.4 for tau in taus): continue
      if electron.convVeto==1 and electron.lostHits<=1 and electron.mvaFall17V2noIso_WPL:
        looseElectrons.append(electron)
        elec_veto = True
        
    if elec_veto : return False
    
    # SELECT JETS
    #jets, bjets, met = fillJetBranches(self,event,tau)
    jets, bjets = fillJetBranches(self,event,tau)
    is0b = False
    if(len(bjets) == 0) : is0b = True
    MET = event.MET_pt    
    MET_phi = event.MET_phi

    # WEIGHTS AND CORRECTIONS
    # EVENT WEIGHTS
    self.lumi[0]            = event.luminosityBlock
    self.metfilter[0]       = self.metfilt(event)
    
    if self.ismc : 
      self.genweight[0]     = event.genWeight
      self.puweight[0]      = self.puTool.getWeight(event.Pileup_nTrueInt)
      # MUON WEIGHTS
      self.trigweight[0]    = self.muSFs.getTriggerSF(muon0.pt,muon0.eta) # assume leading muon was triggered on
      self.idisoweight_1[0] = self.muSFs.getIdIsoSF(muon0.pt,muon0.eta)
      self.idisoweight_2[0] = self.muSFs.getIdIsoSF(muon1.pt,muon1.eta)
      # TAU WEIGHTS
      self.idweightTdm_tau[0]  = 1.0
      self.idweightT_tau[0]    = 1.0
      self.idweightM_tau[0]    = 1.0
      self.idweightVVVL_tau[0] = 1.0
      self.ltfweight_tau[0]    = 1.0
      self.ltfweight_tau[0]    = 1.0
      
      if tau.genPartFlav==5: # real tau
        self.idweightTdm_tau[0]  = self.tauSFsT_dm.getSFvsDM(tau.pt,tau.decayMode)
        self.idweightT_tau[0]    = self.tauSFsT.getSFvsPT(tau.pt)
        self.idweightM_tau[0]    = self.tauSFsM.getSFvsPT(tau.pt) 
        self.idweightVVVL_tau[0] = self.tauSFsVVVL.getSFvsPT(tau.pt)
      elif tau.genPartFlav in [1,3]: # e -> tau fake                       
        self.ltfweight_tau[0]    = self.etfSFs.getSFvsEta(tau.eta,tau.genPartFlav)
      elif tau.genPartFlav in [2,4]: # mu -> tau fake                             
        self.ltfweight_tau[0]    = self.mtfSFs.getSFvsEta(tau.eta,tau.genPartFlav)


    # SAVE CONTROL VARIABLES
    self.pt_mu0[0]   = muon0.pt
    self.eta_mu0[0]  = muon0.eta
    self.q_mu0[0]    = muon0.charge
    self.id_mu0[0]   = muon0.mediumId
    self.iso_mu0[0]  = muon0.pfRelIso04_all
    self.pt_mu1[0]   = muon1.pt
    self.eta_mu1[0]  = muon1.eta
    self.q_mu1[0]    = muon1.charge
    self.id_mu1[0]   = muon1.mediumId
    self.iso_mu1[0]  = muon1.pfRelIso04_all
    self.pt_tau[0]   = tau.pt
    self.eta_tau[0]  = tau.eta
    self.q_tau[0]    = tau.charge
    self.id_tau[0]   = tau.idDeepTau2017v2p1VSjet
    self.iso_tau[0]  = tau.rawIso

    #KC checks
    #print "Hi there, you are in ModuleMuMuTau, under #KC checks-----"
    #for i, jet in enumerate(jets,1):
    #  print "The %s jet has pT = %s" %(i, jet.pt)
    #print "MET = %s with this phi = %s" %(met,met_phi)
    #for j, bjet in enumerate(bjets,1):
    #  print "bjet.pT = %s" %(bjets[0].pt)
    
    isGenuineTau = getIsGenuineTau(self,tau)
    #print "Tau has pt=%s, eta=%s, dz = %s, genPartFlav = %s"%(tau.pt, tau.eta, tau.dz, tau.genPartFlav)
    
    # Event Vars
    HT = 0.0
    LT = 0.0
    ST = 0.0
  
    for jet in jets: HT += jet.pt
    for mu in muons: LT += mu.pt
    LT += tau.pt
    ST = HT + LT + MET
    
    #DiLepton Vars
    isOnZ = False;
    dileptonSystem_p4 = muon0.p4()+muon1.p4()
    dilepton_mass = dileptonSystem_p4.M()
    if( 75.0 < dilepton_mass < 105.0) : isOnZ = True
    
    ## check, jet to tau fake rate method
    TauPt             = tau.pt
    TauEta            = tau.eta
    TauDM             = tau.decayMode
    JetN              = len(jets)
    BJetN             = len(bjets)
    # HT                
    LeptonOnePt       = muon0.pt
    LeptonTwoPt       = muon1.pt
    DileptonPt        = dileptonSystem_p4.Pt()
    DileptonMass      = dilepton_mass
    DileptonDeltaEta  = dileptonSystem_p4.Eta()
    DileptonDeltaPhi  = deltaPhi(muon0.phi,muon1.phi)
    DileptonDeltaR    = muon0.DeltaR(muon1)
    
    self.TauPt[0]              = TauPt           
    self.TauEta[0]             = TauEta          
    self.TauDM[0]              = TauDM
    self.JetN[0]               = JetN            
    self.BJetN[0]              = BJetN           
    self.HT[0]                 = HT            
    self.LeptonOnePt[0]        = LeptonOnePt     
    self.LeptonTwoPt[0]        = LeptonTwoPt     
    self.DileptonPt[0]         = DileptonPt      
    self.DileptonMass[0]       = DileptonMass    
    self.DileptonDeltaEta[0]   = DileptonDeltaEta
    self.DileptonDeltaPhi[0]   = DileptonDeltaPhi
    self.DileptonDeltaR[0]     = DileptonDeltaR  
    
    if isOnZ :
      if is0b:
        self.Loose_0b_tree.Fill()
        if isGenuineTau : self.LooseGenuine_0b_tree.Fill()
        else            : self.LooseFake_0b_tree.Fill()
      
        if tau.idDeepTau2017v2p1VSjet<16: ## Loose not Tight, 16 is for medium WP, in this analysis, "Tight" stands for the medium WP, 
                                          ## to fix, this should be something like parameter instead of hard coded variable, same for the loose WP
          self.LnotT_0b_tree.Fill()
          if isGenuineTau : self.LnotTGenuine_0b_tree.Fill()
          else            : self.LnotTFake_0b_tree.Fill()
        
        else: ## Else is > 16, so "Tight"
          self.Tight_0b_tree.Fill()
          if isGenuineTau : self.TightGenuine_0b_tree.Fill()
          else            : self.TightFake_0b_tree.Fill()
         
      else: ## is >= 1b
        self.Loose_tree.Fill()
        if isGenuineTau : self.LooseGenuine_tree.Fill()
        else            : self.LooseFake_tree.Fill()
      
        if tau.idDeepTau2017v2p1VSjet<16: ## Loose not Tight, 16 is for medium WP, in this analysis, "Tight" stands for the medium WP, 
                                        ## to fix, this should be something like parameter instead of hard coded variable, same for the loose WP
          self.LnotT_tree.Fill()
          if isGenuineTau : self.LnotTGenuine_tree.Fill()
          else            : self.LnotTFake_tree.Fill()
        
        else: ## else is > 16, so "Tight"
          self.Tight_tree.Fill()
          if isGenuineTau : self.TightGenuine_tree.Fill()
          else            : self.TightFake_tree.Fill()
        
    else : ## else is offZ
      pass


    #Fill Histos
    self.tree.Fill()
    
    return True

## Functions
def fillJetBranches(self,event,tau):
    """Help function to select jets and b tags, after removing overlap with tau decay candidates,
    and fill the jet variable branches."""
    
    #met     = self.met(event)
    jets,   bjets  = [ ], [ ]
    
    # SELECT JET, remove overlap with selected tau
    for jet in Collection(event,'Jet'):
      if abs(jet.eta)>2.4: continue #4.7: continue
      if jet.DeltaR(tau)<0.5: continue
      if jet.jetId<2: continue # Tight
      if jet.pt<self.jetCutPt: continue
      jets.append(jet)

      # B TAGGING
      if jet.btagDeepFlavB>self.deepjet_wp.medium and abs(jet.eta)<self.bjetCutEta:
        bjets.append(jet)
    
    # FILL JET BRANCHES
    #jets.sort( key=lambda j: self.ptnom(j),reverse=True)
    #bjets.sort(key=lambda j: self.ptnom(j),reverse=True)
    #self.out.njets[0]         = len(jets)
    #self.out.njets50[0]       = len([j for j in jets if self.ptnom(j)>50])
    #self.out.nfjets[0]        = nfjets
    #self.out.ncjets[0]        = ncjets
    #self.out.ncjets50[0]      = ncjets50
    #self.out.nbtag[0]         = nbtag
    
    # LEADING JET
    #if len(jets)>0:
    #  self.out.jpt_1[0]       = self.ptnom(jets[0])
    #  self.out.jeta_1[0]      = jets[0].eta
    #  self.out.jphi_1[0]      = jets[0].phi
    #  self.out.jdeepjet_1[0]  = jets[0].btagDeepFlavB
    #else:
    #  self.out.jpt_1[0]       = -1.
    #  self.out.jeta_1[0]      = -9.
    #  self.out.jphi_1[0]      = -9.
    #  self.out.jdeepjet_1[0]  = -9.
    
    # LEADING B JET
    #if len(bjets)>0:
    #  self.out.bpt_1[0]       = self.ptnom(bjets[0])
    #  self.out.beta_1[0]      = bjets[0].eta
    #else:
    #  self.out.bpt_1[0]       = -1.
    #  self.out.beta_1[0]      = -9.
    
    #return jets, bjets, met
    return jets, bjets

def getIsGenuineTau(self,tau):
  if not self.ismc : return False

  #KC checks
  #print "Hi there, you are in ModuleMuMuTau/getIsGenuineTau, under #KC checks-----"  
  #print "tau has genPartFlav = %s" %(tau.genPartFlav)
  if tau.genPartFlav==5: # genuine tau
    return True
  else:
    return False
